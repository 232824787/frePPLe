Only in Django-1.5.1/django/conf/project_template: __init__.py
diff -ur Django-1.5.1-original/django/contrib/admin/widgets.py Django-1.5.1/django/contrib/admin/widgets.py
--- Django-1.5.1-original/django/contrib/admin/widgets.py	2013-03-28 21:07:20.000000000 +0100
+++ Django-1.5.1/django/contrib/admin/widgets.py	2013-04-11 22:47:03.981034100 +0200
@@ -6,6 +6,7 @@
 import copy
 
 from django import forms
+from django.db import DEFAULT_DB_ALIAS
 from django.contrib.admin.templatetags.admin_static import static
 from django.core.urlresolvers import reverse
 from django.forms.widgets import RadioFieldRenderer
@@ -15,6 +16,7 @@
 from django.utils.translation import ugettext as _
 from django.utils.safestring import mark_safe
 from django.utils.encoding import force_text
+from django.utils.http import urlquote
 from django.utils import six
 
 
@@ -143,6 +145,10 @@
         if attrs is None:
             attrs = {}
         extra = []
+        if self.db == DEFAULT_DB_ALIAS:
+          prefix = ''
+        else:
+          prefix = '/%s' % self.db        
         if rel_to in self.admin_site._registry:
             # The related object is registered with the same AdminSite
             related_url = reverse('admin:%s_%s_changelist' %
@@ -159,13 +165,16 @@
                 attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.
             # TODO: "lookup_id_" is hard-coded here. This should instead use
             # the correct API to determine the ID dynamically.
-            extra.append('<a href="%s%s" class="related-lookup" id="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> '
-                            % (related_url, url, name))
+            extra.append('<a href="%s%s%s" class="related-lookup" id="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> '
+                            % (prefix, related_url, url, name))
             extra.append('<img src="%s" width="16" height="16" alt="%s" /></a>'
                             % (static('admin/img/selector-search.gif'), _('Lookup')))
         output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra
         if value:
-            output.append(self.label_for_value(value))
+           # FREPPLE DOES NOT SHOW THE CURRENT VALUE, BUT ADDS AN EDIT LINK
+           #output.append(self.label_for_value(value))
+           output.append('<a href="%s%s%s/"> <img src="%s" width="16" height="16" alt="%s" /></a>' % (prefix, related_url, urlquote(value), static('admin/img/icon_changelink.gif'), _('Edit')))
+
         return mark_safe(''.join(output))
 
     def base_url_parameters(self):
diff -ur Django-1.5.1-original/django/core/management/__init__.py Django-1.5.1/django/core/management/__init__.py
--- Django-1.5.1-original/django/core/management/__init__.py	2013-03-28 21:07:20.000000000 +0100
+++ Django-1.5.1/django/core/management/__init__.py	2013-04-11 22:48:39.352489100 +0200
@@ -4,6 +4,7 @@
 from optparse import OptionParser, NO_DEFAULT
 import imp
 import warnings
+from pkgutil import iter_modules
 
 from django.core.exceptions import ImproperlyConfigured
 from django.core.management.base import BaseCommand, CommandError, handle_default_options
diff -ur Django-1.5.1-original/django/db/models/fields/related.py Django-1.5.1/django/db/models/fields/related.py
--- Django-1.5.1-original/django/db/models/fields/related.py	2013-03-28 21:07:20.000000000 +0100
+++ Django-1.5.1/django/db/models/fields/related.py	2013-04-11 22:56:00.591726500 +0200
@@ -1017,7 +1017,9 @@
         if value is None:
             return
 
-        using = router.db_for_read(model_instance.__class__, instance=model_instance)
+        using = model_instance._state.db
+        if using is None:
+            using = router.db_for_read(model_instance.__class__, instance=model_instance)
         qs = self.rel.to._default_manager.using(using).filter(
                 **{self.rel.field_name: value}
              )
diff -ur Django-1.5.1-original/django/db/models/sql/compiler.py Django-1.5.1/django/db/models/sql/compiler.py
--- Django-1.5.1-original/django/db/models/sql/compiler.py	2013-03-28 21:07:20.000000000 +0100
+++ Django-1.5.1/django/db/models/sql/compiler.py	2013-04-11 23:06:16.263941000 +0200
@@ -226,11 +226,14 @@
 
         for table, col in self.query.related_select_cols:
             r = '%s.%s' % (qn(table), qn(col))
-            if with_aliases and col in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if col in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = col
                 result.append('%s AS %s' % (r, c_alias))
                 aliases.add(c_alias)
-                col_aliases.add(c_alias)
+                col_aliases.add(c_alias)            
             else:
                 result.append(r)
                 aliases.add(r)
@@ -289,8 +292,11 @@
                 result.append((alias, field.column))
                 aliases.add(alias)
                 continue
-            if with_aliases and field.column in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if field.column in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = field.column
                 result.append('%s.%s AS %s' % (qn(alias),
                     qn2(field.column), c_alias))
                 col_aliases.add(c_alias)
diff -ur Django-1.5.1-original/django/utils/autoreload.py Django-1.5.1/django/utils/autoreload.py
--- Django-1.5.1-original/django/utils/autoreload.py	2013-03-28 21:07:21.000000000 +0100
+++ Django-1.5.1/django/utils/autoreload.py	2013-04-11 23:08:31.679686300 +0200
@@ -98,7 +98,22 @@
 
 def restart_with_reloader():
     while True:
-        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
+        # Fix for django+py2exe issue:
+        #
+        # Normally:
+        # sys.executable is 'python.exe' and the sys.argv[0] is the script name.
+        # The autoreload thread then runs 'python.exe script arguments'.
+        #
+        # When running from py2exe things are different:
+        # sys.executable is set to 'manage.exe' and sys.argv[0] is
+        # also 'manage.exe'.
+        # The autoreload thread should run "manage.exe arguments" and not
+        # "manage.exe manage.exe arguments". Now the interpreter and the script are
+        # basically one and the same.
+        #
+        #Original code:
+        # args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
+        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + [i for i in sys.argv if not sys.executable.endswith(i)]
         if sys.platform == "win32":
             args = ['"%s"' % arg for arg in args]
         new_environ = os.environ.copy()
diff -ur Django-1.5.1-original/django/utils/translation/trans_real.py Django-1.5.1/django/utils/translation/trans_real.py
--- Django-1.5.1-original/django/utils/translation/trans_real.py	2013-03-28 21:07:21.000000000 +0100
+++ Django-1.5.1/django/utils/translation/trans_real.py	2013-04-11 23:09:38.911531700 +0200
@@ -137,7 +137,7 @@
         # doesn't affect en-gb), even though they will both use the core "en"
         # translation. So we have to subvert Python's internal gettext caching.
         base_lang = lambda x: x.split('-', 1)[0]
-        if base_lang(lang) in [base_lang(trans) for trans in _translations]:
+        if res and base_lang(lang) in [base_lang(trans) for trans in _translations]:
             res._info = res._info.copy()
             res._catalog = res._catalog.copy()
 
