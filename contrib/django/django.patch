Index: django/contrib/admin/media/js/admin/DateTimeShortcuts.js
===================================================================
--- django/contrib/admin/media/js/admin/DateTimeShortcuts.js	(revision 8129)
+++ django/contrib/admin/media/js/admin/DateTimeShortcuts.js	(working copy)
@@ -92,7 +92,7 @@
     openClock: function(num) {
         var clock_box = document.getElementById(DateTimeShortcuts.clockDivName+num)
         var clock_link = document.getElementById(DateTimeShortcuts.clockLinkName+num)
-
+
         // Recalculate the clockbox position
         // is it left-to-right or right-to-left layout ?
         if (getStyle(document.body,'direction')!='rtl') {
@@ -106,7 +106,7 @@
             clock_box.style.left = findPosX(clock_link) - 110 + 'px';
         }
         clock_box.style.top = findPosY(clock_link) - 30 + 'px';
-
+
         // Show the clock box
         clock_box.style.display = 'block';
         addEvent(window, 'click', function() { DateTimeShortcuts.dismissClock(num); return true; });
@@ -128,16 +128,19 @@
         // Shortcut links (calendar icon and "Today" link)
         var shortcuts_span = document.createElement('span');
         inp.parentNode.insertBefore(shortcuts_span, inp.nextSibling);
-        var today_link = document.createElement('a');
-        today_link.setAttribute('href', 'javascript:DateTimeShortcuts.handleCalendarQuickLink(' + num + ', 0);');
-        today_link.appendChild(document.createTextNode(gettext('Today')));
+        //
+        // I don't like this today link...
+        //
+        //var today_link = document.createElement('a');
+        //today_link.setAttribute('href', 'javascript:DateTimeShortcuts.handleCalendarQuickLink(' + num + ', 0);');
+        //today_link.appendChild(document.createTextNode(gettext('Today')));
         var cal_link = document.createElement('a');
         cal_link.setAttribute('href', 'javascript:DateTimeShortcuts.openCalendar(' + num + ');');
         cal_link.id = DateTimeShortcuts.calendarLinkName + num;
         quickElement('img', cal_link, '', 'src', DateTimeShortcuts.admin_media_prefix + 'img/admin/icon_calendar.gif', 'alt', gettext('Calendar'));
         shortcuts_span.appendChild(document.createTextNode('\240'));
-        shortcuts_span.appendChild(today_link);
-        shortcuts_span.appendChild(document.createTextNode('\240|\240'));
+        //shortcuts_span.appendChild(today_link);
+        //shortcuts_span.appendChild(document.createTextNode('\240|\240'));
         shortcuts_span.appendChild(cal_link);

         // Create calendarbox div.
@@ -208,7 +211,7 @@
 	    }
 	}

-
+
         // Recalculate the clockbox position
         // is it left-to-right or right-to-left layout ?
         if (getStyle(document.body,'direction')!='rtl') {
@@ -222,7 +225,7 @@
             cal_box.style.left = findPosX(cal_link) - 180 + 'px';
         }
         cal_box.style.top = findPosY(cal_link) - 75 + 'px';
-
+
         cal_box.style.display = 'block';
         addEvent(window, 'click', function() { DateTimeShortcuts.dismissCalendar(num); return true; });
     },
Index: django/contrib/admin/views/decorators.py
===================================================================
--- django/contrib/admin/views/decorators.py	(revision 8129)
+++ django/contrib/admin/views/decorators.py	(working copy)
@@ -28,7 +28,7 @@
         post_data = _encode_post_data({})
     return render_to_response('admin/login.html', {
         'title': _('Log in'),
-        'app_path': request.path,
+        'app_path': request.get_full_path(),
         'post_data': post_data,
         'error_message': error_message
     }, context_instance=template.RequestContext(request))
@@ -87,7 +87,7 @@
                 if len(users) == 1:
                     message = _("Your e-mail address is not your username. Try '%s' instead.") % users[0].username
                 else:
-                    # Either we cannot find the user, or if more than 1
+                    # Either we cannot find the user, or if more than 1
                     # we cannot guess which user is the correct one.
                     message = _("Usernames cannot contain the '@' character.")
             return _display_login_form(request, message)
@@ -106,7 +106,7 @@
                         return view_func(request, *args, **kwargs)
                     else:
                         request.session.delete_test_cookie()
-                        return http.HttpResponseRedirect(request.path)
+                        return http.HttpResponseRedirect(request.get_full_path())
             else:
                 return _display_login_form(request, ERROR_MESSAGE)

Index: django/contrib/admin/widgets.py
===================================================================
--- django/contrib/admin/widgets.py	(revision 8129)
+++ django/contrib/admin/widgets.py	(working copy)
@@ -36,20 +36,20 @@

 class AdminDateWidget(forms.TextInput):
     class Media:
-        js = (settings.ADMIN_MEDIA_PREFIX + "js/calendar.js",
+        js = (settings.ADMIN_MEDIA_PREFIX + "js/calendar.js",
               settings.ADMIN_MEDIA_PREFIX + "js/admin/DateTimeShortcuts.js")
-
+
     def __init__(self, attrs={}):
         super(AdminDateWidget, self).__init__(attrs={'class': 'vDateField', 'size': '10'})

 class AdminTimeWidget(forms.TextInput):
     class Media:
-        js = (settings.ADMIN_MEDIA_PREFIX + "js/calendar.js",
+        js = (settings.ADMIN_MEDIA_PREFIX + "js/calendar.js",
               settings.ADMIN_MEDIA_PREFIX + "js/admin/DateTimeShortcuts.js")

     def __init__(self, attrs={}):
         super(AdminTimeWidget, self).__init__(attrs={'class': 'vTimeField', 'size': '8'})
-
+
 class AdminSplitDateTime(forms.SplitDateTimeWidget):
     """
     A SplitDateTime Widget that has some admin-specific styling.
@@ -81,7 +81,7 @@
     """
     def __init__(self, attrs={}):
         super(AdminFileWidget, self).__init__(attrs)
-
+
     def render(self, name, value, attrs=None):
         output = []
         if value:
@@ -113,14 +113,15 @@
         output.append('<a href="%s%s" class="related-lookup" id="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> ' % \
             (related_url, url, name))
         output.append('<img src="%simg/admin/selector-search.gif" width="16" height="16" alt="Lookup" /></a>' % settings.ADMIN_MEDIA_PREFIX)
-        if value:
-            output.append(self.label_for_value(value))
+        ## SKIP SHOWING THE CURRENT VALUE
+        #if value:
+        #    output.append(self.label_for_value(value))
         return mark_safe(u''.join(output))
-
+
     def label_for_value(self, value):
         return '&nbsp;<strong>%s</strong>' % \
             truncate_words(self.rel.to.objects.get(pk=value), 14)
-
+
 class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):
     """
     A Widget for displaying ManyToMany ids in the "raw_id" interface rather than
@@ -128,7 +129,7 @@
     """
     def __init__(self, rel, attrs=None):
         super(ManyToManyRawIdWidget, self).__init__(rel, attrs)
-
+
     def render(self, name, value, attrs=None):
         attrs['class'] = 'vManyToManyRawIdAdminField'
         if value:
@@ -136,7 +137,7 @@
         else:
             value = ''
         return super(ManyToManyRawIdWidget, self).render(name, value, attrs)
-
+
     def label_for_value(self, value):
         return ''

@@ -147,7 +148,7 @@
         if value:
             return [value]
         return None
-
+
     def _has_changed(self, initial, data):
         if initial is None:
             initial = []
Index: django/core/management/__init__.py
===================================================================
--- django/core/management/__init__.py	(revision 8129)
+++ django/core/management/__init__.py	(working copy)
@@ -13,36 +13,63 @@
 # doesn't have to reload every time it's called.
 _commands = None

-def find_commands(management_dir):
-    """
-    Given a path to a management directory, returns a list of all the command
-    names that are available.
+try:
+    from pkgutil import iter_modules

-    Returns an empty list if no commands are defined.
-    """
-    command_dir = os.path.join(management_dir, 'commands')
-    try:
-        return [f[:-3] for f in os.listdir(command_dir)
-                if not f.startswith('_') and f.endswith('.py')]
-    except OSError:
-        return []
+except:

-def find_management_module(app_name):
-    """
-    Determines the path to the management module for the given app_name,
-    without actually importing the application or the management module.
+    # Python versions earlier than 2.5 don't have the iter_modules function

-    Raises ImportError if the management module cannot be found for any reason.
-    """
-    parts = app_name.split('.')
-    parts.append('management')
-    parts.reverse()
-    path = None
-    while parts:
-        part = parts.pop()
-        f, path, descr = find_module(part, path and [path] or None)
-    return path
+    def find_commands(app_name):
+        """
+        Given an application name, returns a list of all the commands found.

+        Raises ImportError if no commands are defined.
+        """
+        management_dir = find_management_module(app_name)
+        command_dir = os.path.join(management_dir, 'commands')
+        try:
+            return [f[:-3] for f in os.listdir(command_dir)
+                    if not f.startswith('_') and f.endswith('.py')]
+        except OSError:
+            return []
+
+    def find_management_module(app_name):
+        """
+        Determines the path to the management module for the given app_name,
+        without actually importing the application or the management module.
+
+        Raises ImportError if the management module cannot be found for any reason.
+        """
+        parts = app_name.split('.')
+        parts.append('management')
+        parts.reverse()
+        path = None
+        while parts:
+            part = parts.pop()
+            f, path, descr = find_module(part, path and [path] or None)
+        return path
+
+else:
+
+    # Python 2.5
+    # The iter_modules function has the advantage to be more cleaner and more
+    # generic: also finds packages in zip files, recognizes other file
+    # extensions than .py
+
+    def find_commands(app_name):
+        """
+        Given an application name, returns a list of all the commands found.
+
+        Raises ImportError if no commands are defined.
+        """
+        packages = {}
+        mgmt_package = "%s.management.commands" % app_name
+        # The next line imports the *package*, not all modules in the package
+        __import__(mgmt_package)
+        path = getattr(sys.modules[mgmt_package], '__path__', None)
+        return [i[1] for i in iter_modules(path)]
+
 def load_command_class(app_name, name):
     """
     Given a command name and an application name, returns the Command
@@ -78,15 +105,14 @@
     """
     global _commands
     if _commands is None:
-        _commands = dict([(name, 'django.core') for name in find_commands(__path__[0])])
+        _commands = dict([(name, 'django.core') for name in find_commands('django.core')])

         if load_user_commands:
             # Get commands from all installed apps.
             from django.conf import settings
             for app_name in settings.INSTALLED_APPS:
                 try:
-                    path = find_management_module(app_name)
-                    _commands.update(dict([(name, app_name) for name in find_commands(path)]))
+                    _commands.update(dict([(name, app_name) for name in find_commands(app_name)]))
                 except ImportError:
                     pass # No management module -- ignore this app.

Index: django/db/backends/sqlite3/base.py
===================================================================
--- django/db/backends/sqlite3/base.py	(revision 8129)
+++ django/db/backends/sqlite3/base.py	(working copy)
@@ -75,7 +75,11 @@
         # NB: The generated SQL below is specific to SQLite
         # Note: The DELETE FROM... SQL generated below works for SQLite databases
         # because constraints don't exist
-        sql = ['%s %s %s;' % \
+        sql = ['%s %s = %s' % \
+                (style.SQL_KEYWORD('PRAGMA'),
+                 style.SQL_KEYWORD('SYNCHRONOUS'),
+                 style.SQL_KEYWORD('OFF'))] + \
+               ['%s %s %s;' % \
                 (style.SQL_KEYWORD('DELETE'),
                  style.SQL_KEYWORD('FROM'),
                  style.SQL_FIELD(self.quote_name(table))
Index: django/db/models/sql/query.py
===================================================================
--- django/db/models/sql/query.py	(revision 8129)
+++ django/db/models/sql/query.py	(working copy)
@@ -424,8 +424,11 @@
             for col in self.select:
                 if isinstance(col, (list, tuple)):
                     r = '%s.%s' % (qn(col[0]), qn(col[1]))
-                    if with_aliases and col[1] in col_aliases:
-                        c_alias = 'Col%d' % len(col_aliases)
+                    if with_aliases:
+                        if col[1] in col_aliases:
+                            c_alias = 'Col%d' % len(col_aliases)
+                        else:
+                            c_alias = col[1]
                         result.append('%s AS %s' % (r, c_alias))
                         aliases.add(c_alias)
                         col_aliases.add(c_alias)
@@ -445,8 +448,11 @@
             aliases.update(new_aliases)
         for table, col in self.related_select_cols:
             r = '%s.%s' % (qn(table), qn(col))
-            if with_aliases and col in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if col in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = col
                 result.append('%s AS %s' % (r, c_alias))
                 aliases.add(c_alias)
                 col_aliases.add(c_alias)
@@ -491,8 +497,11 @@
             if as_pairs:
                 result.append((alias, field.column))
                 continue
-            if with_aliases and field.column in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if field.column in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = field.column
                 result.append('%s.%s AS %s' % (qn(alias),
                     qn2(field.column), c_alias))
                 col_aliases.add(c_alias)
@@ -1682,3 +1691,4 @@

 dispatcher.connect(setup_join_cache, signal=signals.class_prepared)

+
Index: django/views/i18n.py
===================================================================
--- django/views/i18n.py	(revision 8129)
+++ django/views/i18n.py	(working copy)
@@ -189,5 +189,8 @@
     src.extend(csrc)
     src.append(LibFoot)
     src.append(InterPolate)
-    src = ''.join(src)
-    return http.HttpResponse(src, 'text/javascript')
+
+    # Create response, and set the HTTP header to allow caching for 1 day by the client browser
+    response = http.HttpResponse(''.join(src), 'text/javascript')
+    response['Cache-Control'] = 'max-age=86400'
+    return response
