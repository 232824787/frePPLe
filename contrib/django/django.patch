Index: django/contrib/admin/media/js/admin/DateTimeShortcuts.js
===================================================================
--- django/contrib/admin/media/js/admin/DateTimeShortcuts.js	(revision 10673)
+++ django/contrib/admin/media/js/admin/DateTimeShortcuts.js	(working copy)
@@ -92,7 +92,7 @@
     openClock: function(num) {
         var clock_box = document.getElementById(DateTimeShortcuts.clockDivName+num)
         var clock_link = document.getElementById(DateTimeShortcuts.clockLinkName+num)
-    
+
         // Recalculate the clockbox position
         // is it left-to-right or right-to-left layout ?
         if (getStyle(document.body,'direction')!='rtl') {
@@ -106,7 +106,7 @@
             clock_box.style.left = findPosX(clock_link) - 110 + 'px';
         }
         clock_box.style.top = findPosY(clock_link) - 30 + 'px';
-    
+
         // Show the clock box
         clock_box.style.display = 'block';
         addEvent(window.document, 'click', function() { DateTimeShortcuts.dismissClock(num); return true; });
@@ -128,16 +128,19 @@
         // Shortcut links (calendar icon and "Today" link)
         var shortcuts_span = document.createElement('span');
         inp.parentNode.insertBefore(shortcuts_span, inp.nextSibling);
-        var today_link = document.createElement('a');
-        today_link.setAttribute('href', 'javascript:DateTimeShortcuts.handleCalendarQuickLink(' + num + ', 0);');
-        today_link.appendChild(document.createTextNode(gettext('Today')));
+        //
+        // I don't like this today link...
+        //
+        //var today_link = document.createElement('a');
+        //today_link.setAttribute('href', 'javascript:DateTimeShortcuts.handleCalendarQuickLink(' + num + ', 0);');
+        //today_link.appendChild(document.createTextNode(gettext('Today')));
         var cal_link = document.createElement('a');
         cal_link.setAttribute('href', 'javascript:DateTimeShortcuts.openCalendar(' + num + ');');
         cal_link.id = DateTimeShortcuts.calendarLinkName + num;
         quickElement('img', cal_link, '', 'src', DateTimeShortcuts.admin_media_prefix + 'img/admin/icon_calendar.gif', 'alt', gettext('Calendar'));
         shortcuts_span.appendChild(document.createTextNode('\240'));
-        shortcuts_span.appendChild(today_link);
-        shortcuts_span.appendChild(document.createTextNode('\240|\240'));
+        //shortcuts_span.appendChild(today_link);
+        //shortcuts_span.appendChild(document.createTextNode('\240|\240'));
         shortcuts_span.appendChild(cal_link);
 
         // Create calendarbox div.
@@ -208,21 +211,13 @@
 	    }
 	}
 
-    
         // Recalculate the clockbox position
-        // is it left-to-right or right-to-left layout ?
-        if (getStyle(document.body,'direction')!='rtl') {
-            cal_box.style.left = findPosX(cal_link) + 17 + 'px';
-        }
-        else {
-            // since style's width is in em, it'd be tough to calculate
-            // px value of it. let's use an estimated px for now
-            // TODO: IE returns wrong value for findPosX when in rtl mode
-            //       (it returns as it was left aligned), needs to be fixed.
-            cal_box.style.left = findPosX(cal_link) - 180 + 'px';
-        }
-        cal_box.style.top = findPosY(cal_link) - 75 + 'px';
-    
+        //
+        // frePPLe wants to have the date popup below the icon
+        //
+        cal_box.style.left = findPosX(cal_link) - 90 + 'px';
+        cal_box.style.top = findPosY(cal_link) + 17 + 'px';
+
         cal_box.style.display = 'block';
         addEvent(window.document, 'click', function() { DateTimeShortcuts.dismissCalendar(num); return true; });
     },
Index: django/contrib/admin/sites.py
===================================================================
--- django/contrib/admin/sites.py	(revision 10673)
+++ django/contrib/admin/sites.py	(working copy)
@@ -292,20 +292,7 @@
         password = request.POST.get('password', None)
         user = authenticate(username=username, password=password)
         if user is None:
-            message = ERROR_MESSAGE
-            if u'@' in username:
-                # Mistakenly entered e-mail address instead of username? Look it up.
-                try:
-                    user = User.objects.get(email=username)
-                except (User.DoesNotExist, User.MultipleObjectsReturned):
-                    message = _("Usernames cannot contain the '@' character.")
-                else:
-                    if user.check_password(password):
-                        message = _("Your e-mail address is not your username."
-                                    " Try '%s' instead.") % user.username
-                    else:
-                        message = _("Usernames cannot contain the '@' character.")
-            return self.display_login_form(request, message)
+            return self.display_login_form(request, ERROR_MESSAGE)
 
         # The user data is correct; log in the user in and continue.
         else:
Index: django/contrib/admin/widgets.py
===================================================================
--- django/contrib/admin/widgets.py	(revision 10673)
+++ django/contrib/admin/widgets.py	(working copy)
@@ -122,8 +122,9 @@
         output.append('<a href="%s%s" class="related-lookup" id="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> ' % \
             (related_url, url, name))
         output.append('<img src="%simg/admin/selector-search.gif" width="16" height="16" alt="%s" /></a>' % (settings.ADMIN_MEDIA_PREFIX, _('Lookup')))
-        if value:
-            output.append(self.label_for_value(value))
+        # frePPLe DOES NOT SHOW THE CURRENT VALUE
+        #if value:
+        #    output.append(self.label_for_value(value))
         return mark_safe(u''.join(output))
     
     def base_url_parameters(self):
Index: django/core/management/__init__.py
===================================================================
--- django/core/management/__init__.py	(revision 10673)
+++ django/core/management/__init__.py	(working copy)
@@ -14,50 +14,80 @@
 # doesn't have to reload every time it's called.
 _commands = None
 
-def find_commands(management_dir):
-    """
-    Given a path to a management directory, returns a list of all the command
-    names that are available.
+try:
+    from pkgutil import iter_modules
+except:
 
-    Returns an empty list if no commands are defined.
-    """
-    command_dir = os.path.join(management_dir, 'commands')
-    try:
-        return [f[:-3] for f in os.listdir(command_dir)
-                if not f.startswith('_') and f.endswith('.py')]
-    except OSError:
-        return []
+    # Python versions earlier than 2.5 don't have the iter_modules function
 
-def find_management_module(app_name):
-    """
-    Determines the path to the management module for the given app_name,
-    without actually importing the application or the management module.
+    def find_management_module(app_name):
+        """
+        Determines the path to the management module for the given app_name,
+        without actually importing the application or the management module.
 
-    Raises ImportError if the management module cannot be found for any reason.
-    """
-    parts = app_name.split('.')
-    parts.append('management')
-    parts.reverse()
-    part = parts.pop()
-    path = None
+        Raises ImportError if the management module cannot be found for any reason.
+        """
+        parts = app_name.split('.')
+        parts.append('management')
+        parts.reverse()
+        part = parts.pop()
+        path = None
 
-    # When using manage.py, the project module is added to the path,
-    # loaded, then removed from the path. This means that
-    # testproject.testapp.models can be loaded in future, even if
-    # testproject isn't in the path. When looking for the management
-    # module, we need look for the case where the project name is part
-    # of the app_name but the project directory itself isn't on the path.
-    try:
-        f, path, descr = imp.find_module(part,path)
-    except ImportError,e:
-        if os.path.basename(os.getcwd()) != part:
-            raise e
+        # When using manage.py, the project module is added to the path,
+        # loaded, then removed from the path. This means that
+        # testproject.testapp.models can be loaded in future, even if
+        # testproject isn't in the path. When looking for the management
+        # module, we need look for the case where the project name is part
+        # of the app_name but the project directory itself isn't on the path.
+        try:
+            f, path, descr = imp.find_module(part,path)
+        except ImportError,e:
+            if os.path.basename(os.getcwd()) != part:
+                raise e
 
-    while parts:
-        part = parts.pop()
-        f, path, descr = imp.find_module(part, path and [path] or None)
-    return path
+        while parts:
+            part = parts.pop()
+            f, path, descr = imp.find_module(part, path and [path] or None)
+        return path
 
+    def find_commands(app_name):
+        """
+        Given a path to a management directory, returns a list of all the command
+        names that are available.
+
+        Returns an empty list if no commands are defined.
+        """
+        management_dir = find_management_module(app_name)
+        command_dir = os.path.join(management_dir, 'commands')
+        try:
+            return [f[:-3] for f in os.listdir(command_dir)
+                    if not f.startswith('_') and f.endswith('.py')]
+        except OSError:
+            return []
+
+
+
+else:
+
+    # Python 2.5
+    # The iter_modules function has the advantage to be more cleaner and more
+    # generic: also finds packages in zip files, recognizes other file
+    # extensions than .py
+
+    def find_commands(app_name):
+        """
+        Given an application name, returns a list of all the commands found.
+
+        Raises ImportError if no commands are defined.
+        """
+        packages = {}
+        mgmt_package = "%s.management.commands" % app_name
+        # The next line imports the *package*, not all modules in the package
+        __import__(mgmt_package)
+        path = getattr(sys.modules[mgmt_package], '__path__', None)
+        return [i[1] for i in iter_modules(path)]
+
+
 def load_command_class(app_name, name):
     """
     Given a command name and an application name, returns the Command
@@ -93,7 +123,7 @@
     """
     global _commands
     if _commands is None:
-        _commands = dict([(name, 'django.core') for name in find_commands(__path__[0])])
+        _commands = dict([(name, 'django.core') for name in find_commands('django.core')])
 
         # Find the installed apps
         try:
@@ -114,9 +144,8 @@
         # Find and load the management module for each installed app.
         for app_name in apps:
             try:
-                path = find_management_module(app_name)
                 _commands.update(dict([(name, app_name)
-                                       for name in find_commands(path)]))
+                                       for name in find_commands(app_name)]))
             except ImportError:
                 pass # No management module - ignore this app

Index: django/db/models/sql/query.py
===================================================================
--- django/db/models/sql/query.py	(revision 10673)
+++ django/db/models/sql/query.py	(working copy)
@@ -745,8 +745,11 @@
 
         for table, col in self.related_select_cols:
             r = '%s.%s' % (qn(table), qn(col))
-            if with_aliases and col in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if col in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = col
                 result.append('%s AS %s' % (r, c_alias))
                 aliases.add(c_alias)
                 col_aliases.add(c_alias)
@@ -805,8 +808,11 @@
                 result.append((alias, field.column))
                 aliases.add(alias)
                 continue
-            if with_aliases and field.column in col_aliases:
-                c_alias = 'Col%d' % len(col_aliases)
+            if with_aliases:
+                if field.column in col_aliases:
+                    c_alias = 'Col%d' % len(col_aliases)
+                else:
+                    c_alias = field.column
                 result.append('%s.%s AS %s' % (qn(alias),
                     qn2(field.column), c_alias))
                 col_aliases.add(c_alias)
Index: django/views/i18n.py
===================================================================
--- django/views/i18n.py	(revision 10673)
+++ django/views/i18n.py	(working copy)
@@ -190,5 +190,8 @@
     src.extend(csrc)
     src.append(LibFoot)
     src.append(InterPolate)
-    src = ''.join(src)
-    return http.HttpResponse(src, 'text/javascript')
+
+    # Create response, and set the HTTP header to allow caching for 1 day by the client browser
+    response = http.HttpResponse(''.join(src), 'text/javascript')
+    response['Cache-Control'] = 'max-age=86400'
+    return response
