<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <description>
    This test case tests the embedded python interpreter.
    It verifies:
      - Executing Python code as XML processing instruction.
      - Executing Python code in a seperate source file.
      - Performance comparison of data loading in different ways.
      - Catching of exceptions thrown in frePPLe C++ code.
      - Executing Python code in different threads
  </description>
  <current>2009-01-01T00:00:00</current>
  
<?python
import sys, frepple, os
print "1. Python as a processing instruction"
myvariable = 4
print '1. defining my variable:', myvariable
print '1. frepple version:', frepple.version

execfile("python.py")
print '3. retrieving a variable:', myvariable
print '3. calling a function:', my_function(myvariable)

# In the next steps we are comparing the speed of 3 types of APIs each
# achieving exactly the same final result:
#  1) Frepple C++ to read a XML-datafile.
#  2) Python to read a CSV-datafile, which is reformatted in memory
#     into XML and passed to frePPLe as a string.
#  3) Python to read a CSV-datafile, which then the calls the C++ API
#     directly.
# The relative performance is pretty interesting:
#  1) 3.06 sec
#  2) 3.86 sec
#  3) 2.43 sec
# These numbers are based on a file with 200000 items and 100 operations
# to create. The test is running on a 3.2GHz Intel Pentium (R) dual core
# Linux machine.
# Conclusion: The overhead of parsing of the verbose XML data format
# is considerable, even when coded in C++. Interpreted Python code can
# easily achieve better performance.
# Obviously a different test configuration will give different results.
# E.g. when running small XML messages rather than a huge data file...
create_files(200000)
start = os.times()
frepple.readXMLfile("items.xml",False)
end = os.times()
print "Read XML file: user time %f, system time %f, elapsed time %f" % (end[0]-start[0], end[1]-start[1], end[4]-start[4])
frepple.saveXMLfile("afterXMLread.xml")
frepple.erase(True)
frepple.saveXMLfile("aftererase1.xml")

start = os.times()
read_csv_file()
end = os.times()
print "Read CSV file & generate XML data: user time %f, system time %f, elapsed time %f" % (end[0]-start[0], end[1]-start[1], end[4]-start[4])
frepple.saveXMLfile("afterCSVread.xml")
frepple.erase(True)
frepple.saveXMLfile("aftererase2.xml")

start = os.times()
read_csv_file_direct()
end = os.times()
print "Read CSV file: user time %f, system time %f, elapsed time %f" % (end[0]-start[0], end[1]-start[1], end[4]-start[4])
frepple.saveXMLfile("afterCSVDirectread.xml")
frepple.erase(True)
frepple.saveXMLfile("aftererase3.xml")

print '5. python catches exceptions thrown from the frepple C++ code'
frepple.saveXMLfile("output.1.xml")

# A simple user interface. -->
def UI():
  import Tkinter
  
  def post_xml():
    t.insert(Tkinter.END,"<plan>\n</plan>")
  
  root = Tkinter.Tk("Frepple","Frepple")
  Tkinter.Label(text="Edit your xml message", anchor=Tkinter.W).pack()
  s = Tkinter.Scrollbar(root)
  t = Tkinter.Text(root)
  t.insert(Tkinter.END,"<plan>\n</plan>")
  t.focus_set()
  Tkinter.Button(text="exit", command=sys.exit).pack(side=Tkinter.BOTTOM,fill=Tkinter.NONE)
  Tkinter.Button(text="submit", command=post_xml).pack(side=Tkinter.BOTTOM,fill=Tkinter.NONE)
  Tkinter.Entry(state=Tkinter.DISABLED).pack(side=Tkinter.BOTTOM,fill=Tkinter.NONE)
  s.pack(side=Tkinter.RIGHT, fill=Tkinter.Y)
  t.pack(side=Tkinter.LEFT, expand=True, fill=Tkinter.BOTH)
  s.config(command=t.yview)
  t.config(yscrollcommand=s.set)
  #Tkinter.Entry(state=Tkinter.DISABLED).pack()
  Tkinter.mainloop()

# A simple web server. -->
def webserver():
  import SimpleHTTPServer,SocketServer, frepple
  PORT = 8000
  
  class FreppleServer(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_HEAD(self):
      # Headers
      self.send_header("Content-type", "application/xml")
      self.send_header("Cache-Control", "no-cache")
      self.end_headers()
    def do_GET(self):
      # Body
      try:
        # Return the complete model as an XML page
        # For large models this will blow up browser: the xml data
        # are being loaded in a DOM tree, consuming plenty of memory...
 xxxx
        self.wfile.write(frepple.saveXMLstring())
      except:
        self.send_error(500, "Exception when saving the model")
  
  print "started HTTP server on port ", PORT
  print "Point your browser to http://localhost:" + str(PORT) + " to see the pages."
  print "Use ctrl-c to exit..."
  SocketServer.TCPServer(("", PORT), FreppleServer).serve_forever()

# An interactive debugging prompt. -->
def debug():
  import code
  code.interact("Interactive debugging prompt (use CTRL-Z to exit)")

UI()

?>

</plan>
