<?xml version="1.0" encoding="UTF-8" ?>
<PLAN xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <DESCRIPTION>
    This test case tests the embedded python interpreter.
  </DESCRIPTION>
  <CURRENT>2007-01-01T00:00:00</CURRENT>
  <COMMANDS>
  	<VERBOSE>true</VERBOSE>
  	<ABORTONERROR>false</ABORTONERROR>
    <COMMAND xsi:type="COMMAND_PYTHON" FILENAME="python.py"/>
    <COMMAND xsi:type="COMMAND_PYTHON" FILENAME="nowheretobefound.py"/>
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>
<![CDATA[
import sys, frepple
myvariable = 4
print '1. defining my variable:', myvariable
print '1. frepple version:', frepple.version
]]>
      </CMDLINE>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>
<![CDATA[
print '2. retrieving a variable:', myvariable
print '2. calling a function:', my_function(myvariable)
]]>
      </CMDLINE>
    </COMMAND>
    <!--
    In the next steps we are comparing the speed of 3 types of APIs each
    achieving eaxactly the same final result:
     1) Frepple C++ to read a XML-datafile
     2) Python to read a CSV-datafile, which is reformatted into XML and
        passed to Frepple as a string
     3) Python to read a CSV-datafile, which then calls a special C++ function
        that creates the Frepple objects in the most direct way (i.e. no XML)
    The relative performance is pretty interesting:
     1) 3.19 sec
     2) 4.28 sec
     3) 1.69 sec
    These numbers are based on a file with 200000 items and 100 operations
    to create. The test is running on a 3.2GHz Intel Pentium (R) dual core
    Linux machine.
    Conclusion: Overhead caused by the XML-processing is of the same order of
    magnitude as the overhead by the interpreted nature of Python. Both are
    considerable, but still acceptable for many applications.
    Obviously a different test configuration will give different results.
    E.g. running small messages rather than a huge data file...
    -->
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>create_files(200000)</CMDLINE>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_READXML" FILENAME="items.xml" VALIDATE="false" />
    <COMMAND xsi:type="COMMAND_SAVE" FILENAME="afterXMLread.xml" />
    <COMMAND xsi:type="COMMAND_ERASE" MODE="model" />
    <COMMAND xsi:type="COMMAND_SAVE" FILENAME="aftererase1.xml" />
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>read_csv_file()</CMDLINE>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_SAVE" FILENAME="afterCSVread.xml" />
    <COMMAND xsi:type="COMMAND_ERASE" MODE="model" />
    <COMMAND xsi:type="COMMAND_SAVE" FILENAME="aftererase2.xml" />
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>read_csv_file_direct()</CMDLINE>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_SAVE" FILENAME="afterCSVDirectread.xml" />
    <COMMAND xsi:type="COMMAND_ERASE" MODE="model" />
    <COMMAND xsi:type="COMMAND_SAVE" FILENAME="aftererase3.xml" />
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>
<![CDATA[
print '3. a syntax error:'
wrong
]]>
      </CMDLINE>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_PYTHON">
      <CMDLINE>
<![CDATA[
print '4. python catches exceptions thrown from the frepple C++ code'
frepple.readXMLfile('nowheretobefound.xml')
]]>
      </CMDLINE>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_LIST" MAXPARALLEL="4">
      <COMMAND xsi:type="COMMAND_PYTHON">
        <CMDLINE>
<![CDATA[
import time
print '5a. start sleep'
time.sleep(1)
print '5a. end sleep'
]]>
        </CMDLINE>
      </COMMAND>
      <COMMAND xsi:type="COMMAND_PYTHON">
        <CMDLINE>
<![CDATA[
import time
print '5b. start sleep'
time.sleep(1)
print '5b. end sleep'
]]>
        </CMDLINE>
      </COMMAND>
      <COMMAND xsi:type="COMMAND_SYSTEM">
        <CMDLINE>echo 5c. start sleep &amp;&amp; sleep 1&amp;&amp; echo 5c. after sleep</CMDLINE>
      </COMMAND>
    </COMMAND>
    <COMMAND xsi:type="COMMAND_SAVE">
      <FILENAME>output.1.xml</FILENAME>
    </COMMAND>

<!-- A simple user interface. -->
<!--
    <COMMAND xsi:type="COMMAND_PYTHON">
        <CMDLINE>
<![CDATA[
import Tkinter

def post_xml():
  t.insert(Tkinter.END,"<PLAN>\n</PLAN>")

root = Tkinter.Tk("Frepple","Frepple")
Tkinter.Label(text="Edit your xml message", anchor=Tkinter.W).pack()
s = Tkinter.Scrollbar(root)
t = Tkinter.Text(root)
t.insert(Tkinter.END,"<PLAN>\n</PLAN>")
t.focus_set()
Tkinter.Button(text="exit", command=sys.exit).pack(side=Tkinter.BOTTOM,fill=Tkinter.NONE)
Tkinter.Button(text="submit", command=post_xml).pack(side=Tkinter.BOTTOM,fill=Tkinter.NONE)
Tkinter.Entry(state=Tkinter.DISABLED).pack(side=Tkinter.BOTTOM,fill=Tkinter.NONE)
s.pack(side=Tkinter.RIGHT, fill=Tkinter.Y)
t.pack(side=Tkinter.LEFT, expand=True, fill=Tkinter.BOTH)
s.config(command=t.yview)
t.config(yscrollcommand=s.set)
#Tkinter.Entry(state=Tkinter.DISABLED).pack()
Tkinter.mainloop()
]]>
      </CMDLINE>
    </COMMAND>
-->

<!-- A simple web server. -->
<!--
    <COMMAND xsi:type="COMMAND_PYTHON">
        <CMDLINE>
<![CDATA[
import SimpleHTTPServer,SocketServer, frepple
PORT = 8000

class FreppleServer(SimpleHTTPServer.SimpleHTTPRequestHandler):
  def do_HEAD(self):
    # Headers
    self.send_header("Content-type", "text/html")
    self.send_header("Cache-Control", "no-cache")
    self.end_headers()
  def do_GET(self):
    # Body
    try:
      # Return the complete model as an XML page
      self.wfile.write(frepple.saveXMLstring())
    except:
      self.send_error(500, "Exception when saving the model")

print "Started HTTP server on port ", PORT
print "Point your browser to http://localhost:" + str(PORT) + " to see the pages."
print "Use ctrl-c to exit..."
SocketServer.TCPServer(("", PORT), FreppleServer).serve_forever()
]]>
      </CMDLINE>
    </COMMAND>
-->
  </COMMANDS>
</PLAN>
