<?xml version="1.0" encoding="UTF-8" ?>
<plan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<?python
import time

output = open('output.1.xml', 'w')

def wait (msg, secs):
  time.sleep(secs)
  print >>output, msg

?>
  <name>command Test</name>
  <description>
    In this test commands are being run in parallel and in sequence. The proper
    branching and merging of the tasks is verified, and the behavior in case of
    errors. The system commands used in this test are crafted such that they
    work both in *nix shells and windows command shell.
  </description>
  <commands>
    <verbose>true</verbose>
    <abortonerror>true</abortonerror>
    <command xsi:type="command_python" cmdline="print >>output, 'START'" />
    <!-- Creating a bunch of parallel tasks which merge at the end. -->
    <command xsi:type="command_python"
      cmdline="print >>output, 'TEST 1: Creating parallel tasks and merge them'" />
    <command xsi:type="command_list" maxparallel="100">
      <command xsi:type="command_list">
        <command xsi:type="command_python"
          cmdline="wait('A after 1 second',1)" />
        <command xsi:type="command_python"
          cmdline="wait('A after 2 seconds',1)" />
        <command xsi:type="command_python"
          cmdline="wait('A after 5 seconds',3)" />
      </command>
      <command xsi:type="command_python"
        cmdline="wait('B after 3 seconds',3)" />
      <command xsi:type="command_list">
        <command xsi:type="command_python"
          cmdline="wait('C after 4 seconds',4)" />
        <command xsi:type="command_python"
          cmdline="wait('C after 6 seconds',2)" />
      </command>
    </command>
    <!-- Creating a command list that continues in case of an error. -->
    <command xsi:type="command_python"
      cmdline="print >>output, 'TEST 2: Command list that continues on error'" />
    <command xsi:type="command_list">
      <abortonerror>false</abortonerror>
      <command xsi:type="command_python"
        cmdline="print >>output, 'before failure'" />
      <command xsi:type="command_python" cmdline="bad syntax" />
      <command xsi:type="command_python"
        cmdline="print >>output, 'after failure'" />
    </command>
    <!-- Creating a command list that aborts in case of an error. -->
    <command xsi:type="command_python"
      cmdline="print >>output, 'TEST 3: Command list that aborts on error'" />
    <command xsi:type="command_list">
      <abortonerror>true</abortonerror>
      <command xsi:type="command_python"
        cmdline="print >>output, 'before failure'" />
      <command xsi:type="command_python" cmdline="this is garbage code" />
      <command xsi:type="command_python"
        cmdline="print >>output, 'after failure'" />
    </command>
    <!-- Creating some parallel tasks one of which fails. -->
    <command xsi:type="command_python"
      cmdline="print >>output, 'TEST 4: Parallel commands with failing branch'" />
    <command xsi:type="command_list">
      <!-- value has no impact on execution any more! -->
      <abortonerror>false</abortonerror>
      <maxparallel>100</maxparallel>
      <command xsi:type="command_python"
        cmdline="print >>output, 'task 1 okay'" />
      <command xsi:type="command_list">
        <command xsi:type="command_python"
          cmdline="wait('task 2 failing',2)" />
        <command xsi:type="command_python"
          cmdline="this is garbage code" />
      </command>
      <command xsi:type="command_python"
        cmdline="wait('task 3 okay',3)" />
    </command>
    <command xsi:type="command_python" cmdline="print >>output, 'END'" />
    <command xsi:type="command_python" cmdline="output.close()" />
  </commands>
</plan>
