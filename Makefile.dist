#
# Copyright (C) 2007 by Johan De Taeye
#
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
#

# file : $URL$
# revision : $LastChangedRevision$  $LastChangedBy$
# date : $LastChangedDate$

#
# This makefile is built as a convenience for developers.
# It provides easy to use wrappers around common administration, build and maintenance tasks:
#  BUILDING AND COMPILING
#     - default:     Configures and recreates an optimized build from scratch.
#     - debug:       Configures and recreates a debug build from scratch.
#     - coverage:    Configures and recompiles the code for coverage testing.
#     - profile:     Configures and recompiles the code suitable for profiling.
#     - build:       Compiles a configured project.
#     - clean:       Cleans up all intermediate files.
#     - check:       Runs the test suite.
#  DISTRIBTION TASKS
#     - dist:        Creates a source code tarball.
#  CODE ANALYSIS
#     - stats:       Runs a simple lines-of-code metric on the source code.
#     - todo:        Greps for todo items in the source code.
#     - astyle:      Runs the astyle code beautifier.
#  CODE MAINTENANCE
#     - set_release: Updates all references to the release number from an old to a new number.
#     - svn:         Updates the source code with the latest version in the SourceForge SVN repository.
#

default: prep config clean build dist check

debug: prep configdebug clean build check

coverage: prep configcoverage clean build check

profile: prep configprofile clean build

prep:
	@echo
	@echo "PHASE: Configuring GNU build tools..."
	aclocal
	autoheader
#
# Use this if you want to release the stuff.
# Don't use it for your own development builds
#	automake --include-deps
#
# Use these option when automake versions are changing
	automake
	autoconf

prep_force:
	@echo
	@echo "PHASE: Configuring GNU build tools..."
	aclocal
	autoheader
	libtoolize --copy --force --automake
	automake --add-missing --force-missing --copy
	autoconf

config:
	@echo
	@echo "PHASE: Running configure for optimized build..."
	./configure --enable-doc  --prefix=`pwd`/install-test
#	  --disable-multithread

configdebug:
	@echo
	@echo "PHASE: Running configure for debug build..."
	./configure --disable-doc --enable-debug --prefix=`pwd`/install-test
# --disable-multithread

configcoverage:
	@echo
	@echo "PHASE: Running configure for test coverage build..."
	./configure --disable-doc --enable-coverage --prefix=`pwd`/install-test

configprofile:
	@echo
	@echo "PHASE: Running configure for profiling build..."
	./configure --disable-doc --enable-profile --prefix=`pwd`/install-test

clean:
	@echo
	@echo "PHASE: Cleaning..."
	make clean

build:
	@echo
	@echo "PHASE: Building..."
	make all

check:
	@echo
	@echo "PHASE: Testing..."
	make check

dist:
	@echo
	@echo "PHASE: Making a distribution..."
	make dist

# A simple way to get some code metrics
stats:
	wc -l `find src -name '*.cpp'` \
		`find modules -name '*.cpp'` \
		`find contrib -name '*.cpp'` \
		`find src -name '*.h'` \
		`find include -name '*.h'` \
		`find contrib -name '*.h'` \
		`find modules -name '*.h'` | grep -v config.h | sort -n
	wc -l `find . -name '*.py'` | sort -n

# A simple way to list the todo items
todo:
	grep -i todo `find . -name '*.cpp'` `find . -name '*.h'` `find . -name '*.xml'` `find . -name '*.py'` | sort
	grep -i todo `find . -name '*.cpp'` `find . -name '*.h'` `find . -name '*.xml'` `find . -name '*.py'` | wc

# Reformats the code to comply to some common standard
# Our formatting is closely aligned with the CoreLinux standards
astyleoptions = --style=ansi --indent=spaces=2 --indent-classes --indent-switches --min-conditional-indent=2 --one-line=keep-statements --one-line=keep-blocks --max-instatement-indent=2 --convert-tabs
astyle:
	astyle --mode=c $(astyleoptions) `find . -name '*.cpp'`
	astyle --mode=c $(astyleoptions) `find . -name '*.h'`

# The release number is (unfortunately) stored in a number of independent places:
# This make target is used to update all those places in a single go.
# The following references will still have to be updated manually:
#   - In the excel spreadsheet hit alt-F11 and edit the "about" tab in the "config" form.
old1 = 0
old2 = 5
old3 = 2
old4 = -beta
new1 = 0
new2 = 5
new3 = 2
new4 =
set_release:
	for i in "configure.in" "doc/menu.html" "contrib/rpm/frepple.spec" "include/frepple/utils.h" "contrib/django/freppledb/settings.py" "contrib/django/freppledb/locale/django.po" "bin/frepple.xsd" "bin/frepple_core.xsd"; do \
		sed 's/$(old1)\.$(old2)\.$(old3)$(old4)/$(new1).$(new2).$(new3)$(new4)/g' $$i >out.tmp; \
		mv out.tmp $$i; \
	done
	sed 's/Version "$(old1)\.$(old2)\.$(old3)/Version "$(new1).$(new2).$(new3)/g' "contrib/installer/frepple.nsi" >out.tmp
	sed 's/PRODUCT_VERSION "$(old1)\.$(old2)\.$(old3)$(old4)"/PRODUCT_VERSION "$(new1).$(new2).$(new3)$(new4)"/' out.tmp >"contrib/installer/frepple.nsi"
	for i in "src/dll.rc" "src/exe.rc"; do \
		sed 's/$(old1),$(old2),$(old3)/$(new1),$(new2),$(new3)/g' $$i >out.tmp; \
		sed 's/$(old1), $(old2), $(old3)/$(new1), $(new2), $(new3)/g' out.tmp >$$i; \
		rm out.tmp; \
	done

svn:
	svn update
